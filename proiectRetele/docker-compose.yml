version: '3.8'

services:
  server:
    build:
      context: .
      dockerfile: docker/Dockerfile
    privileged: true
    volumes:
      - ./src:/elocal/src
      - ./blacklist.txt:/elocal/blacklist.txt
      - ./loguri:/elocal/loguri
    ports:
      - "53:53/udp"
    tty: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_ADMIN
    networks:
      net2:
        ipv4_address: 198.7.0.2
    depends_on:
      - "router"
    command: bash -c "/scripts/server.sh && sleep infinity"

  middle:
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./src:/elocal/src
      - ./scripts:/scripts
    tty: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_ADMIN
    networks:
      net2:
        ipv4_address: 198.7.0.3
    depends_on:
      - "router"
    sysctls:
      - net.ipv4.ip_forward=1
    dns: 198.7.0.2 
    command: bash -c "python3 /elocal/src/arp_spoofing.py && sleep infinity"

  router:
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./src:/elocal/src
    tty: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_ADMIN
    networks:
      net1:
        ipv4_address: 172.7.0.1
      net2:
        ipv4_address: 198.7.0.1
    sysctls:
      - net.ipv4.ip_forward=1
    command: bash -c "/scripts/router.sh && sleep infinity"

  client:
    build:
      context: .
      dockerfile: docker/Dockerfile
    volumes:
      - ./src:/elocal/src
    tty: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_ADMIN
    networks:
      net1:
        ipv4_address: 172.7.0.2
    depends_on:
      - "router"
      - "server"
    command: bash -c "/scripts/client.sh && sleep infinity"

networks:
  net1:
    ipam:
      driver: default
      config:
        - subnet: 172.7.0.0/16
          gateway: 172.7.1.1
  net2:
    ipam:
      driver: default
      config:
        - subnet: 198.7.0.0/16
          gateway: 198.7.1.1
